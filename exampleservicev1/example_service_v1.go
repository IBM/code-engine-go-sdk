/**
 * (C) Copyright IBM Corp. 2019.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Package exampleservicev1 : Operations and models for the ExampleServiceV1 service
package exampleservicev1

import (
	"fmt"
	"github.com/IBM/go-sdk-core/core"
	common "github.ibm.com/CloudEngineering/go-sdk-template/common"
)

// ExampleServiceV1 : No description provided (generated by Openapi Generator
// https://github.com/openapitools/openapi-generator)
//
// Version: 1.0.0
type ExampleServiceV1 struct {
	Service *core.BaseService
}

const defaultServiceURL = "http://cloud.ibm.com/mysdk/v1"

// ExampleServiceV1Options : Service options
type ExampleServiceV1Options struct {
	URL           string
	Authenticator core.Authenticator
}

// NewExampleServiceV1 : Instantiate ExampleServiceV1
func NewExampleServiceV1(options *ExampleServiceV1Options) (service *ExampleServiceV1, err error) {
	if options.URL == "" {
		options.URL = defaultServiceURL
	}

	serviceOptions := &core.ServiceOptions{
		URL:             options.URL,
		Authenticator:   options.Authenticator,
	}

	baseService, err := core.NewBaseService(serviceOptions, "example_service", "ExampleService")
	if err != nil {
		return
	}

	service = &ExampleServiceV1{
		Service: baseService,
	}

	return
}

// SetServiceURL sets the service URL
func (exampleService *ExampleServiceV1) SetServiceURL(url string) error {
	return exampleService.Service.SetServiceURL(url)
}


// ListResources : List all resources
func (exampleService *ExampleServiceV1) ListResources(listResourcesOptions *ListResourcesOptions) (result *Resources, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listResourcesOptions, "listResourcesOptions")
	if err != nil {
		return
	}

	pathSegments := []string{"resources"}
	pathParameters := []string{}

	builder := core.NewRequestBuilder(core.GET)
	_, err = builder.ConstructHTTPURL(exampleService.Service.Options.URL, pathSegments, pathParameters)
	if err != nil {
		return
	}

	for headerName, headerValue := range listResourcesOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("example_service", "V1", "ListResources")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	builder.AddHeader("Accept", "application/json")

	if listResourcesOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listResourcesOptions.Limit))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = exampleService.Service.Request(request, new(Resources))
	if err == nil {
		var ok bool
		result, ok = response.Result.(*Resources)
		if !ok {
			err = fmt.Errorf("An error occurred while processing the operation response.")
		}
	}

	return
}


// CreateResource : Create a resource
func (exampleService *ExampleServiceV1) CreateResource(createResourceOptions *CreateResourceOptions) (result *Resource, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(createResourceOptions, "createResourceOptions")
	if err != nil {
		return
	}

	pathSegments := []string{"resources"}
	pathParameters := []string{}

	builder := core.NewRequestBuilder(core.POST)
	_, err = builder.ConstructHTTPURL(exampleService.Service.Options.URL, pathSegments, pathParameters)
	if err != nil {
		return
	}

	for headerName, headerValue := range createResourceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("example_service", "V1", "CreateResource")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	body := make(map[string]interface{})
	if createResourceOptions.ResourceID != nil {
		body["resource_id"] = createResourceOptions.ResourceID
	}
	if createResourceOptions.Name != nil {
		body["name"] = createResourceOptions.Name
	}
	if createResourceOptions.Tag != nil {
		body["tag"] = createResourceOptions.Tag
	}
	_, err = builder.SetBodyContentJSON(body)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = exampleService.Service.Request(request, new(Resource))
	if err == nil {
		var ok bool
		result, ok = response.Result.(*Resource)
		if !ok {
			err = fmt.Errorf("An error occurred while processing the operation response.")
		}
	}

	return
}


// GetResource : Info for a specific resource
func (exampleService *ExampleServiceV1) GetResource(getResourceOptions *GetResourceOptions) (result *Resource, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getResourceOptions, "getResourceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getResourceOptions, "getResourceOptions")
	if err != nil {
		return
	}

	pathSegments := []string{"resources"}
	pathParameters := []string{*getResourceOptions.ResourceID}

	builder := core.NewRequestBuilder(core.GET)
	_, err = builder.ConstructHTTPURL(exampleService.Service.Options.URL, pathSegments, pathParameters)
	if err != nil {
		return
	}

	for headerName, headerValue := range getResourceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("example_service", "V1", "GetResource")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = exampleService.Service.Request(request, new(Resource))
	if err == nil {
		var ok bool
		result, ok = response.Result.(*Resource)
		if !ok {
			err = fmt.Errorf("An error occurred while processing the operation response.")
		}
	}

	return
}


// CreateResourceOptions : The CreateResource options.
type CreateResourceOptions struct {

	// The id of the resource.
	ResourceID *int64 `json:"resource_id,omitempty"`

	// The name of the resource.
	Name *string `json:"name,omitempty"`

	// A tag value for the resource.
	Tag *string `json:"tag,omitempty"`

	// Allows users to set headers to be GDPR compliant
	Headers map[string]string
}

// NewCreateResourceOptions : Instantiate CreateResourceOptions
func (exampleService *ExampleServiceV1) NewCreateResourceOptions() *CreateResourceOptions {
	return &CreateResourceOptions{}
}

// SetResourceID : Allow user to set ResourceID
func (options *CreateResourceOptions) SetResourceID(resourceID int64) *CreateResourceOptions {
	options.ResourceID = core.Int64Ptr(resourceID)
	return options
}

// SetName : Allow user to set Name
func (options *CreateResourceOptions) SetName(name string) *CreateResourceOptions {
	options.Name = core.StringPtr(name)
	return options
}

// SetTag : Allow user to set Tag
func (options *CreateResourceOptions) SetTag(tag string) *CreateResourceOptions {
	options.Tag = core.StringPtr(tag)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *CreateResourceOptions) SetHeaders(param map[string]string) *CreateResourceOptions {
	options.Headers = param
	return options
}

// GetResourceOptions : The GetResource options.
type GetResourceOptions struct {

	// The id of the resource to retrieve.
	ResourceID *string `json:"resource_id" validate:"required"`

	// Allows users to set headers to be GDPR compliant
	Headers map[string]string
}

// NewGetResourceOptions : Instantiate GetResourceOptions
func (exampleService *ExampleServiceV1) NewGetResourceOptions(resourceID string) *GetResourceOptions {
	return &GetResourceOptions{
		ResourceID: core.StringPtr(resourceID),
	}
}

// SetResourceID : Allow user to set ResourceID
func (options *GetResourceOptions) SetResourceID(resourceID string) *GetResourceOptions {
	options.ResourceID = core.StringPtr(resourceID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetResourceOptions) SetHeaders(param map[string]string) *GetResourceOptions {
	options.Headers = param
	return options
}

// ListResourcesOptions : The ListResources options.
type ListResourcesOptions struct {

	// How many items to return at one time (max 100).
	Limit *int64 `json:"limit,omitempty"`

	// Allows users to set headers to be GDPR compliant
	Headers map[string]string
}

// NewListResourcesOptions : Instantiate ListResourcesOptions
func (exampleService *ExampleServiceV1) NewListResourcesOptions() *ListResourcesOptions {
	return &ListResourcesOptions{}
}

// SetLimit : Allow user to set Limit
func (options *ListResourcesOptions) SetLimit(limit int64) *ListResourcesOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListResourcesOptions) SetHeaders(param map[string]string) *ListResourcesOptions {
	options.Headers = param
	return options
}

// Resource : A resource.
type Resource struct {

	// The id of the resource.
	ResourceID *int64 `json:"resource_id" validate:"required"`

	// The name of the resource.
	Name *string `json:"name" validate:"required"`

	// A tag value for the resource.
	Tag *string `json:"tag,omitempty"`
}

// NewResource : Instantiate Resource (Generic Model Constructor)
func (exampleService *ExampleServiceV1) NewResource(resourceID int64, name string) (model *Resource, err error) {
	model = &Resource{
		ResourceID: core.Int64Ptr(resourceID),
		Name: core.StringPtr(name),
	}
	err = core.ValidateStruct(model, "required parameters")
	return
}

// Resources : List of resources.
type Resources struct {

	// Offset value for this portion of the resource list.
	Offset *int64 `json:"offset,omitempty"`

	// Limit value specified or defaulted in the list_resources request.
	Limit *int64 `json:"limit,omitempty"`

	// A list of resources.
	Resources []Resource `json:"resources,omitempty"`
}
